{
  "name": "exceljs",
  "version": "0.2.3",
  "description": "Excel Workbook Manager",
  "private": false,
  "license": "MIT",
  "author": {
    "name": "Guyon Roche",
    "email": "cyber.sapiens@hotmail.com",
    "url": "https://github.com/guyonroche/exceljs"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/guyonroche/exceljs.git"
  },
  "keywords": [
    "xlsx",
    "json",
    "csv",
    "excel",
    "font",
    "border",
    "fill",
    "number",
    "format",
    "number format",
    "alignment",
    "office",
    "spreadsheet",
    "workbook"
  ],
  "dependencies": {
    "archiver": "0.14.3",
    "bluebird": "*",
    "fast-csv": "0.5.7",
    "moment": "~2.9.0",
    "sax": "^0.6.0",
    "underscore": "1.4.4",
    "unzip": ">= 0.1.9"
  },
  "devDependencies": {
    "jasmine-node": "~1.14",
    "memorystream": "*"
  },
  "scripts": {
    "test": "jasmine-node spec"
  },
  "main": "./excel.js",
  "files": [
    "excel.js",
    "lib",
    "LICENSE",
    "README.md",
    "MODEL.md"
  ],
  "readme": "# ExcelJS\r\n\r\nRead, manipulate and write spreadsheet data and styles to XLSX and JSON.\r\n\r\nReverse engineered from Excel spreadsheet files as a project.\r\n\r\n# Installation\r\n\r\nnpm install exceljs\r\n\r\n# New Features!\r\n\r\n<ul>\r\n    <li>Bug Fixes\r\n        <ul>\r\n            <li>\r\n                <a href=\"https://github.com/guyonroche/exceljs/issues/18\">Merge Cell Styles</a>\r\n                <ul>\r\n                    <li>\r\n                        Merged cells now persist (and parse) their styles.\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <a href=\"#streaming-xlxs-writer\">Streaming XLSX Writer</a>\r\n        <ul>\r\n            <li>\r\n                At long last ExcelJS can support writing massive XLSX files in a scalable\r\n                memory efficient manner. Performance has been optimised and even smaller spreadsheets\r\n                can be faster to write than the document writer. Options have been added to control\r\n                the use of shared strings and styles as these can both have a considerable effect on\r\n                performance\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <a href=\"#rows\">Worksheet.lastRow</a>\r\n        <ul>\r\n            <li>Access the last editable row in a worksheet.</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <a href=\"#rows\">Row.commit()</a>\r\n        <ul>\r\n            <li>\r\n                For streaming writers, this method commits the row (and any previous rows) to the stream.\r\n                Committed rows will no longer be editable (and are typically deleted from the worksheet object).\r\n                For Document type workbooks, this method has no effect.\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n# Backlog\r\n\r\n<ul>\r\n    <li>XLSX Streaming Parser</li>\r\n    <li>Parsing CSV with Headers</li>\r\n    <li>Use WeakMap if Available</li>\r\n    <li>Investigate streaming zip</li>\r\n</ul>\r\n\r\n# Contents\r\n\r\n<ul>\r\n    <li>\r\n        <a href=\"#interface\">Interface</a>\r\n        <ul>\r\n            <li><a href=\"#create-a-workbook\">Create a Workbook</a></li>\r\n            <li><a href=\"#set-workbook-properties\">Set Workbook Properties</a></li>\r\n            <li><a href=\"#add-a-worksheet\">Add a Worksheet</a></li>\r\n            <li><a href=\"#access-worksheets\">Access Worksheets</a></li>\r\n            <li><a href=\"#columns\">Columns</a></li>\r\n            <li><a href=\"#rows\">Rows</a></li>\r\n            <li><a href=\"#handling-individual-cells\">Handling Individual Cells</a></li>\r\n            <li><a href=\"#merged-cells\">Merged Cells</a></li>\r\n            <li><a href=\"#styles\">Styles</a>\r\n                <ul>\r\n                    <li><a href=\"#number-formats\">Number Formats</a></li>\r\n                    <li><a href=\"#fonts\">Fonts</a></li>\r\n                    <li><a href=\"#alignment\">Alignment</a></li>\r\n                    <li><a href=\"#borders\">Borders</a></li>\r\n                    <li><a href=\"#fills\">Fills</a></li>\r\n                </ul>\r\n            </li>\r\n            <li><a href=\"#file-io\">File I/O</a>\r\n                <ul>\r\n                    <li><a href=\"#xlsx\">XLSX</a>\r\n                        <ul>\r\n                            <li><a href=\"#reading-xlsx\">Reading XLSX</a></li>\r\n                            <li><a href=\"#writing-xlsx\">Writing XLSX</a></li>\r\n                        </ul>\r\n                    </li>\r\n                    <li><a href=\"#csv\">CSV</a>\r\n                        <ul>\r\n                            <li><a href=\"#reading-csv\">Reading CSV</a></li>\r\n                            <li><a href=\"#writing-csv\">Writing CSV</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li><a href=\"#value-types\">Value Types</a></li>\r\n    <li><a href=\"#known-issues\">Known Issues</a></li>\r\n    <li><a href=\"#release-history\">Release History</a></li>\r\n</ul>\r\n\r\n# Interface\r\n\r\n```javascript\r\nvar Excel = require(\"exceljs\");\r\n```\r\n\r\n## Create a Workbook\r\n\r\n```javascript\r\nvar workbook = new Excel.Workbook();\r\n```\r\n\r\n## Set Workbook Properties\r\n\r\n```javascript\r\nworkbook.creator = \"Me\";\r\nworkbook.lastModifiedBy = \"Her\";\r\nworkbook.created = new Date(1985, 8, 30);\r\nworkbook.modified = new Date();\r\n```\r\n\r\n## Add a Worksheet\r\n\r\n```javascript\r\nvar sheet = workbook.addWorksheet(\"My Sheet\");\r\n```\r\n\r\n## Access Worksheets\r\n```javascript\r\n// Iterate over all sheets\r\n// Note: workbook.worksheets.forEach will still work but this is better\r\nworkbook.eachSheet(function(worksheet, sheetId) {\r\n    // ...\r\n});\r\n\r\n// fetch sheet by name\r\nvar worksheet = workbook.getWorksheet(\"My Sheet\");\r\n\r\n// fetch sheet by id\r\nvar worksheet = workbook.getWorksheet(1);\r\n```\r\n\r\n## Columns\r\n\r\n```javascript\r\n// Add column headers and define column keys and widths\r\n// Note: these column structures are a workbook-building convenience only,\r\n// apart from the column width, they will not be fully persisted.\r\nworksheet.columns = [\r\n    { header: \"Id\", key: \"id\", width: 10 },\r\n    { header: \"Name\", key: \"name\", width: 32 },\r\n    { header: \"D.O.B.\", key: \"DOB\", width: 10 }\r\n];\r\n\r\n// Access an individual columns by key, letter and 1-based column number\r\nvar idCol = worksheet.getColumn(\"id\");\r\nvar nameCol = worksheet.getColumn(\"B\");\r\nvar dobCol = worksheet.getColumn(3);\r\n    \r\n// set column properties\r\n\r\n// Note: will overwrite cell value C1\r\ndobCol.header = \"Date of Birth\";\r\n\r\n// Note: this will overwrite cell values C1:C2\r\ndobCol.header = [\"Date of Birth\", \"A.K.A. D.O.B.\"];\r\n\r\n// from this point on, this column will be indexed by \"dob\" and not \"DOB\"\r\ndobCol.key = \"dob\";\r\n\r\ndobCol.width = 15;\r\n\r\n// iterate over all current cells in this column\r\ndobCol.eachCell(function(cell, rowNumber) {\r\n    // ...\r\n});\r\n\r\n// iterate over all current cells in this column including empty cells\r\ndobCol.eachCell({ includeEmpty: true }, function(cell, rowNumber) {\r\n    // ...\r\n});\r\n\r\n\r\n\r\n```\r\n\r\n## Rows\r\n\r\n```javascript\r\n// Add a couple of Rows by key-value, after the last current row, using the column keys\r\nworksheet.addRow({id: 1, name: \"John Doe\", dob: new Date(1970,1,1)});\r\nworksheet.addRow({id: 2, name: \"Jane Doe\", dob: new Date(1965,1,7)});\r\n\r\n// Add a row by contiguous Array (assign to columns A, B & C)\r\nworksheet.addRow([3, \"Sam\", new Date()]);\r\n\r\n// Add a row by sparse Array (assign to columns A, E & I)\r\nvar rowValues = [];\r\nrowValues[1] = 4;\r\nrowValues[5] = \"Kyle\";\r\nrowValues[9] = new Date();\r\nworksheet.addRow(rowValues);\r\n\r\n// Get a row object. If it doesn't already exist, a new empty one will be returned\r\nvar row = worksheet.getRow(5);\r\n\r\n// Get the last editable row in a worksheet (or undefined if there are none)\r\nvar row = worksheet.lastRow;\r\n\r\n// Set a specific row height\r\nrow.height = 42.5;\r\n\r\nrow.getCell(1).value = 5; // A5's value set to 5\r\nrow.getCell(\"name\").value = \"Zeb\"; // B5's value set to \"Zeb\" - assuming column 2 is still keyed by name\r\nrow.getCell(\"C\").value = new Date(); // C5's value set to now\r\n\r\n// Get a row as a sparse array\r\n// Note: interface change: worksheet.getRow(4) ==> worksheet.getRow(4).values\r\nrow = worksheet.getRow(4).values;\r\nexpect(row[5]).toEqual(\"Kyle\");\r\n\r\n// assign row values by contiguous array (where array element 0 has a value)\r\nrow.values = [1,2,3];\r\nexpect(row.getCell(1).value).toEqual(1);\r\nexpect(row.getCell(2).value).toEqual(2);\r\nexpect(row.getCell(3).value).toEqual(3);\r\n\r\n// assign row values by sparse array  (where array element 0 is undefined)\r\nvar values = []\r\nvalues[5] = 7;\r\nvalues[10] = \"Hello, World!\";\r\nrow.values = values;\r\nexpect(row.getCell(1).value).toBeNull();\r\nexpect(row.getCell(5).value).toEqual(7);\r\nexpect(row.getCell(10).value).toEqual(\"Hello, World!\");\r\n\r\n// assign row values by object, using column keys\r\nrow.values = {\r\n    id: 13,\r\n    name: \"Thing 1\",\r\n    dob: new Date()\r\n};\r\n\r\n// Iterate over all rows that have values in a worksheet\r\nworksheet.eachRow(function(row, rowNumber) {\r\n    console.log(\"Row \" + rowNumber + \" = \" + JSON.stringify(row.values));\r\n});\r\n\r\n// Iterate over all rows (including empty rows) in a worksheet\r\nworksheet.eachRow({ includeEmpty: true }, function(row, rowNumber) {\r\n    console.log(\"Row \" + rowNumber + \" = \" + JSON.stringify(row.values));\r\n});\r\n\r\n// Iterate over all non-null cells in a row\r\nrow.eachCell(function(cell, colNumber) {\r\n    console.log(\"Cell \" + colNumber + \" = \" + cell.value);\r\n});\r\n\r\n// Iterate over all cells in a row (including empty cells)\r\nrow.eachCell({ includeEmpty: true }, function(cell, colNumber) {\r\n    console.log(\"Cell \" + colNumber + \" = \" + cell.value);\r\n});\r\n\r\n// Commit a completed row to stream\r\nrow.commit();\r\n```\r\n\r\n## Handling Individual Cells\r\n\r\n```javascript\r\n// Modify/Add individual cell\r\nworksheet.getCell(\"C3\").value = new Date(1968, 5, 1);\r\n\r\n// query a cell's type\r\nexpect(worksheet.getCell(\"C3\").type).toEqual(Excel.ValueType.Date);\r\n```\r\n\r\n## Merged Cells\r\n\r\n```javascript\r\n// merge a range of cells\r\nworksheet.mergeCells(\"A4:B5\");\r\n\r\n// ... merged cells are linked\r\nworksheet.getCell(\"B5\").value = \"Hello, World!\";\r\nexpect(worksheet.getCell(\"B5\").value).toBe(worksheet.getCell(\"A4\").value);\r\nexpect(worksheet.getCell(\"B5\").master).toBe(worksheet.getCell(\"A4\"));\r\n\r\n// ... merged cells share the same style object\r\nexpect(worksheet.getCell(\"B5\").style).toBe(worksheet.getCell(\"A4\").style);\r\nworksheet.getCell(\"B5\").style.font = myFonts.arial;\r\nexpect(worksheet.getCell(\"A4\").style.font).toBe(myFonts.arial);\r\n\r\n// unmerging the cells breaks the style links\r\nworksheet.unMergeCells(\"A4\");\r\nexpect(worksheet.getCell(\"B5\").style).not.toBe(worksheet.getCell(\"A4\").style);\r\nexpect(worksheet.getCell(\"B5\").style.font).not.toBe(myFonts.arial);\r\n\r\n// merge by top-left, bottom-right\r\nworksheet.mergeCells(\"G10\", \"H11\");\r\nworksheet.mergeCells(10,11,12,13); // top,left,bottom,right\r\n\r\n```\r\n\r\n## Styles\r\n\r\nCells, Rows and Columns each support a rich set of styles and formats that affect how the cells are displayed.\r\n\r\nStyles are set by assigning the following properties:\r\n* <a href=\"#number-formats\">numFmt</a>\r\n* <a href=\"#fonts\">font</a>\r\n* <a href=\"#alignment\">alignment</a>\r\n* <a href=\"#borders\">border</a>\r\n* <a href=\"#fills\">fill</a>\r\n\r\n```javascript\r\n// assign a style to a cell\r\nws.getCell(\"A1\").numFmt = \"0.00%\";\r\n\r\n// Apply styles to worksheet columns\r\nws.columnscolumns = [\r\n    { header: \"Id\", key: \"id\", width: 10 },\r\n    { header: \"Name\", key: \"name\", width: 32, style: { font: { name: \"Arial Black\" } } },\r\n    { header: \"D.O.B.\", key: \"DOB\", width: 10, style: { numFmt: \"dd/mm/yyyy\" } }\r\n];\r\n\r\n// Set Column 3 to Currency Format\r\nws.getColumn(3).numFmt = \"�#,##0;[Red]-�#,##0\";\r\n\r\n// Set Row 2 to Comic Sans.\r\nws.getRow(2).font = { name: \"Comic Sans MS\", family: 4, size: 16, underline: \"double\", bold: true };\r\n```\r\n\r\nWhen a style is applied to a row or column, it will be applied to all currently existing cells in that row or column.\r\n Also, any new cell that is created will inherit its initial styles from the row and column it belongs to.\r\n\r\nIf a cell's row and column both define a specific style (e.g. font), the cell will use the row style over the column style.\r\n However if the row and column define different styles (e.g. column.numFmt and row.font), the cell will inherit the font from the row and the numFmt from the column.\r\n\r\n\r\n\r\nCaveat: All the above properties (with the exception of numFmt, which is a string), are JS object structures.\r\n If the same style object is assigned to more than one spreadsheet entity, then each entity will share the same style object.\r\n If the style object is later modified before the spreadsheet is serialized, then all entities referencing that style object will be modified too.\r\n This behaviour is intended to prioritize performance by reducing the number of JS objects created.\r\n If you want the style objects to be independent, you will need to clone them before assigning them.\r\n Also, by default, when a document is read from file (or stream) if spreadsheet entities share similar styles, then they will reference the same style object too.\r\n\r\n### Number Formats\r\n\r\n```javascript\r\n// display value as \"1 3/5\"\r\nws.getCell(\"A1\").value = 1.6;\r\nws.getCell(\"A1\").numFmt = \"# ?/?\";\r\n\r\n// display value as \"1.60%\"\r\nws.getCell(\"B1\").value = 0.016;\r\nws.getCell(\"B1\").numFmt = \"0.00%\";\r\n```\r\n\r\n### Fonts\r\n\r\n```javascript\r\n\r\n// for the wannabe graphic designers out there\r\nws.getCell(\"A1\").font = {\r\n    name: \"Comic Sans MS\",\r\n    family: 4,\r\n    size: 16,\r\n    underline: true,\r\n    bold: true\r\n};\r\n\r\n// for the graduate graphic designers...\r\nws.getCell(\"A2\").font = {\r\n    name: \"Arial Black\",\r\n    color: { argb: \"FF00FF00\" },\r\n    family: 2,\r\n    size: 14,\r\n    italic: true\r\n};\r\n\r\n// note: the cell will store a reference to the font object assigned.\r\n// If the font object is changed afterwards, the cell font will change also...\r\nvar font = { name: \"Arial\", size: 12 };\r\nws.getCell(\"A3\").font = font;\r\nfont.size = 20; // Cell A3 now has font size 20!\r\n\r\n// Cells that share similar fonts may reference the same font object after\r\n// the workbook is read from file or stream\r\n\r\n```\r\n\r\n| Font Property             | Description       | Example Value(s) |\r\n| ------------------------- | ----------------- | ---------------- |\r\n| name | Font name. | \"Arial\", \"Calibri\", etc. |\r\n| family | Font family. An integer value. | 1,2,3, etc. |\r\n| scheme | Font scheme. | \"minor\", \"major\", \"none\" |\r\n| charset | Font charset. An integer value. | 1, 2, etc. |\r\n| color | Colour description, an object containing an ARGB value. | { argb: \"FFFF0000\"} |\r\n| bold | Font **weight** | true, false |\r\n| italic | Font *slope* | true, false |\r\n| underline | Font <u>underline</u> style | true, false, \"none\", \"single\", \"double\", \"singleAccounting\", \"doubleAccounting\" |\r\n| strike | Font <strike>strikethrough</strike> | true, false |\r\n| outline | Font outline | true, false |\r\n\r\n### Alignment\r\n\r\n```javascript\r\n// set cell alignment to top-left, middle-center, bottom-right\r\nws.getCell(\"A1\").alignment = { vertical: \"top\", horizontal: \"left\" };\r\nws.getCell(\"B1\").alignment = { vertical: \"middle\", horizontal: \"center\" };\r\nws.getCell(\"C1\").alignment = { vertical: \"bottom\", horizontal: \"right\" };\r\n\r\n// set cell to wrap-text\r\nws.getCell(\"D1\").alignment = { wrapText: true };\r\n\r\n// set cell indent to 1\r\nws.getCell(\"E1\").alignment = { indent: 1 };\r\n\r\n// set cell text rotation to 30deg upwards, 45deg downwards and vertical text\r\nws.getCell(\"F1\").alignment = { textRotation: 30 };\r\nws.getCell(\"G1\").alignment = { textRotation: -45 };\r\nws.getCell(\"H1\").alignment = { textRotation: \"vertical\" };\r\n\r\n```\r\n\r\n**Valid Alignment Property Values**\r\n\r\n| horizontal | vertical    | wrapText | indent  | readingOrder | textRotation |\r\n| ---------- | ----------- | -------- | ------- | ------------ | ------------ |\r\n| left       | top         | true     | integer | rtl          | 0 to 90      |\r\n| center     | middle      | false    |         | ltr          | -1 to -90    |\r\n| right      | bottom      |          |         |              | vertical     |\r\n| fill       | distributed |          |         |              |              |\r\n| justify    | justify     |          |         |              |              |\r\n| centerContinuous |       |          |         |              |              |\r\n| distributed |            |          |         |              |              |\r\n\r\n\r\n### Borders\r\n\r\n```javascript\r\n// set single thin border around A1\r\nws.getCell(\"A1\").border = {\r\n    top: {style:\"thin\"},\r\n    left: {style:\"thin\"},\r\n    bottom: {style:\"thin\"},\r\n    right: {style:\"thin\"}\r\n};\r\n\r\n// set double thin green border around A3\r\nws.getCell(\"A3\").border = {\r\n    top: {style:\"double\", color: {argb:\"FF00FF00\"}},\r\n    left: {style:\"double\", color: {argb:\"FF00FF00\"}},\r\n    bottom: {style:\"double\", color: {argb:\"FF00FF00\"}},\r\n    right: {style:\"double\", color: {argb:\"FF00FF00\"}}\r\n};\r\n\r\n// set thick red cross in A5\r\nws.getCell(\"A5\").border = {\r\n    diagonal: {up: true, down: true, style:\"thick\", color: {argb:\"FFFF0000\"}}\r\n};\r\n```\r\n\r\n**Valid Border Styles**\r\n* thin\r\n* dotted\r\n* dashDot\r\n* hair\r\n* dashDotDot\r\n* slantDashDot\r\n* mediumDashed\r\n* mediumDashDotDot\r\n* mediumDashDot\r\n* medium\r\n* double\r\n* thick\r\n\r\n### Fills\r\n\r\n```javascript\r\n// fill A1 with red darkVertical stripes\r\nws.getCell(\"A1\").fill = {\r\n    type: \"pattern\",\r\n    pattern:\"darkVertical\",\r\n    fgColor:{argb:\"FFFF0000\"}\r\n};\r\n\r\n// fill A2 with yellow dark trellis and blue behind\r\nws.getCell(\"A2\").fill = {\r\n    type: \"pattern\",\r\n    pattern:\"darkTrellis\",\r\n    fgColor:{argb:\"FFFFFF00\"},\r\n    bgColor:{argb:\"FF0000FF\"}\r\n};\r\n\r\n// fill A3 with blue-white-blue gradient from left to right\r\nws.getCell(\"A3\").fill = {\r\n    type: \"gradient\",\r\n    gradient: \"angle\",\r\n    degree: 0,\r\n    stops: [\r\n        {position:0, color:{argb:\"FF0000FF\"}},\r\n        {position:0.5, color:{argb:\"FFFFFFFF\"}},\r\n        {position:1, color:{argb:\"FF0000FF\"}}\r\n    ]\r\n};\r\n\r\n\r\n// fill A4 with red-green gradient from center\r\nws.getCell(\"A2\").fill = {\r\n    type: \"gradient\",\r\n    gradient: \"path\",\r\n    center:{left:0.5,top:0.5},\r\n    stops: [\r\n        {position:0, color:{argb:\"FFFF0000\"}},\r\n        {position:1, color:{argb:\"FF00FF00\"}}\r\n    ]\r\n};\r\n\r\n```\r\n\r\n#### Pattern Fills\r\n\r\n| Property | Required | Description |\r\n| -------- | -------- | ----------- |\r\n| type     | Y        | Value: \"pattern\"<br/>Specifies this fill uses patterns |\r\n| pattern  | Y        | Specifies type of pattern (see <a href=\"#valid-pattern-types\">Valid Pattern Types</a> below) |\r\n| fgColor  | N        | Specifies the pattern foreground color. Default is black. |\r\n| bgColor  | N        | Specifies the pattern background color. Default is white. |\r\n\r\n**Valid Pattern Types**\r\n* none\r\n* solid\r\n* darkVertical\r\n* darkGray\r\n* mediumGray\r\n* lightGray\r\n* gray125\r\n* gray0625\r\n* darkHorizontal\r\n* darkVertical\r\n* darkDown\r\n* darkUp\r\n* darkGrid\r\n* darkTrellis\r\n* lightHorizontal\r\n* lightVertical\r\n* lightDown\r\n* lightUp\r\n* lightGrid\r\n* lightTrellis\r\n* lightGrid\r\n\r\n#### Gradient Fills\r\n\r\n| Property | Required | Description |\r\n| -------- | -------- | ----------- |\r\n| type     | Y        | Value: \"gradient\"<br/>Specifies this fill uses gradients |\r\n| gradient | Y        | Specifies gradient type. One of [\"angle\", \"path\"] |\r\n| degree   | angle    | For \"angle\" gradient, specifies the direction of the gradient. 0 is from the left to the right. Values from 1 - 359 rotates the direction clockwise |\r\n| center   | path     | For \"path\" gradient. Specifies the relative coordinates for the start of the path. \"left\" and \"top\" values range from 0 to 1 |\r\n| stops    | Y        | Specifies the gradient colour sequence. Is an array of objects containing position and color starting with position 0 and ending with position 1. Intermediatary positions may be used to specify other colours on the path. |\r\n\r\n**Caveats**\r\nUsing the interface above it may be possible to create gradient fill effects not possible using the XLSX editor program.\r\nFor example, Excel only supports angle gradients of 0, 45, 90 and 135.\r\nSimilarly the sequence of stops may also be limited by the UI with positions [0,1] or [0,0.5,1] as the only options.\r\nTake care with this fill to be sure it is supported by the target XLSX viewers.\r\n\r\n## File I/O\r\n\r\n### XLSX\r\n\r\n#### Reading XLSX\r\n\r\n```javascript\r\n// read from a file\r\nvar workbook = new Excel.Workbook();\r\nworkbook.xlsx.readFile(filename)\r\n    .then(function() {\r\n        // use workbook\r\n    });\r\n\r\n// pipe from stream\r\nvar workbook = new Excel.Workbook();\r\nstream.pipe(workbook.xlsx.createInputStream());\r\n```\r\n\r\n#### Writing XLSX\r\n\r\n```javascript\r\n// write to a file\r\nvar workbook = createAndFillWorkbook();\r\nworkbook.xlsx.writeFile(filename)\r\n    .then(function() {\r\n        // done\r\n    });\r\n\r\n// write to a stream\r\nworkbook.xlsx.write(stream)\r\n    .then(function() {\r\n        // done\r\n    });\r\n```\r\n\r\n### CSV\r\n\r\n#### Reading CSV\r\n\r\n```javascript\r\n// read from a file\r\nvar workbook = new Excel.Workbook();\r\nworkbook.csv.readFile(filename)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n// read from a stream\r\nvar workbook = new Excel.Workbook();\r\nworkbook.csv.read(stream)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n// pipe from stream\r\nvar workbook = new Excel.Workbook();\r\nstream.pipe(workbook.csv.createInputStream());\r\n\r\n// read from a file with European Dates\r\nvar workbook = new Excel.Workbook();\r\nvar options = {\r\n    dateFormats: [\"DD/MM/YYYY\"]\r\n};\r\nworkbook.csv.readFile(filename, options)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n\r\n// read from a file with custom value parsing\r\nvar workbook = new Excel.Workbook();\r\nvar options = {\r\n    map: function(value, index) {\r\n        switch(index) {\r\n            case 0:\r\n                // column 1 is string\r\n                return value;\r\n            case 1:\r\n                // column 2 is a date\r\n                return new Date(value);\r\n            case 2:\r\n                // column 3 is JSON of a formula value\r\n                return JSON.parse(value);\r\n            default:\r\n                // the rest are numbers\r\n                return parseFloat(value);\r\n        }\r\n    }\r\n};\r\nworkbook.csv.readFile(filename, options)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n```\r\n\r\nThe CSV parser uses [fast-csv](https://www.npmjs.com/package/fast-csv) to read the CSV file.\r\n The options passed into the read functions above is also passed to fast-csv for parsing of the csv data.\r\n Please refer to the fast-csv README.md for details.\r\n\r\nDates are parsed using the npm module [moment](https://www.npmjs.com/package/moment).\r\n If no dateFormats are supplied, the following are used:\r\n* moment.ISO_8601\r\n* \"MM-DD-YYYY\"\r\n* \"YYYY-MM-DD\"\r\n\r\n#### Writing CSV\r\n\r\n```javascript\r\n\r\n// write to a file\r\nvar workbook = createAndFillWorkbook();\r\nworkbook.csv.writeFile(filename)\r\n    .then(function() {\r\n        // done\r\n    });\r\n\r\n// write to a stream\r\nworkbook.csv.write(stream)\r\n    .then(function() {\r\n        // done\r\n    });\r\n\r\n\r\n// read from a file with European Date-Times\r\nvar workbook = new Excel.Workbook();\r\nvar options = {\r\n    dateFormat: \"DD/MM/YYYY HH:mm:ss\"\r\n};\r\nworkbook.csv.readFile(filename, options)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n\r\n// read from a file with custom value formatting\r\nvar workbook = new Excel.Workbook();\r\nvar options = {\r\n    map: function(value, index) {\r\n        switch(index) {\r\n            case 0:\r\n                // column 1 is string\r\n                return value;\r\n            case 1:\r\n                // column 2 is a date\r\n                return moment(value).format(\"YYYY-MM-DD\");\r\n            case 2:\r\n                // column 3 is a formula, write just the result\r\n                return value.result;\r\n            default:\r\n                // the rest are numbers\r\n                return value;\r\n        }\r\n    }\r\n};\r\nworkbook.csv.readFile(filename, options)\r\n    .then(function(worksheet) {\r\n        // use workbook or worksheet\r\n    });\r\n\r\n```\r\n\r\nThe CSV parser uses [fast-csv](https://www.npmjs.com/package/fast-csv) to write the CSV file.\r\n The options passed into the write functions above is also passed to fast-csv for writing the csv data.\r\n Please refer to the fast-csv README.md for details.\r\n\r\nDates are formatted using the npm module [moment](https://www.npmjs.com/package/moment).\r\n If no dateFormat is supplied, moment.ISO_8601 is used.\r\n\r\n### Streaming I/O\r\n\r\nThe File I/O documented above requires that an entire workbook is built up in memory before the file can be written.\r\n While convenient, it can limit the size of the document due to the amount of memory required.\r\n\r\nA streaming writer (or reader) processes the workbook or worksheet data as it is generated,\r\n converting it into file form as it goes. Typically this is much more efficient on memory as the final\r\n memory footprint and even intermediate memory footprints are much more compact than with the document version,\r\n especially when you consider that the row and cell objects are disposed once they are committed.\r\n\r\nThe interface to the streaming workbook and worksheet is almost the same as the document versions with a few minor practical differences:\r\n* Once a worksheet is added to a workbook, it cannot be removed.\r\n* Once a row is committed, it is no longer accessible since it will have been dropped from the worksheet.\r\n* unMergeCells() is not supported.\r\n\r\nNote that it is possible to build the entire workbook without committing any rows.\r\n When the workbook is committed, all added worksheets (including all uncommitted rows) will be automatically committed.\r\n However in this case, little will have been gained over the Document version.\r\n\r\n#### Streaming XLSX\r\n\r\n##### Streaming XLSX Writer\r\n\r\nThe streaming XLSX writer is available in the ExcelJS.stream.xlsx namespace.\r\n\r\nThe constructor takes an optional options object with the following fields:\r\n\r\n| Field | Description |\r\n| ----- | ----------- |\r\n| stream | Specifies a writable stream to write the XLSX workbook to. |\r\n| filename | If stream not specified, this field specifies the path to a file to write the XLSX workbook to. |\r\n| useSharedStrings | Specifies whether to use shared strings in the workbook. Default is false |\r\n| useStyles | Specifies whether to add style information to the workbook. Styles can add some performance overhead. Default is false |\r\n\r\nIf neither stream nor filename is specified in the options, the workbook writer will create a StreamBuf object\r\n that will store the contents of the XLSX workbook in memory. \r\n This StreamBuf object, which can be accessed via the property workbook.stream, can be used to either\r\n access the bytes directly by stream.read() or to pipe the contents to another stream.\r\n\r\n```javascript\r\n// construct a streaming XLSX workbook writer with styles and shared strings\r\nvar options = {\r\n    filename: \"./streamed-workbook.xlsx\",\r\n    useStyles: true,\r\n    useSharedStrings: true\r\n};\r\nvar workbook = new Excel.stream.xlsx.WorkbookWriter(options);\r\n```\r\n\r\nIn general, the interface to the streaming XLSX writer is the same as the Document workbook (and worksheets)\r\n described above, in fact the row, cell and style objects are the same.\r\n\r\nHowever there are some differences...\r\n\r\n**Construction**\r\n\r\nAs seen above, the WorkbookWriter will typically require the output stream or file to be specified in the constructor.\r\n\r\n**Committing Data**\r\n\r\nWhen a worksheet row is ready, it should be committed so that the row object and contents can be freed.\r\n Typically this would be done as each row is added...\r\n\r\n```javascript\r\nworksheet.addRow({\r\n   id: i,\r\n   name: theName,\r\n   etc: someOtherDetail\r\n}).commit();\r\n```\r\n\r\nThe reason the WorksheetWriter does not commit rows as they are added is to allow cells to be merged across rows:\r\n```javascript\r\nworksheet.mergeCells(\"A1:B2\");\r\nworksheet.getCell(\"A1\").value = \"I am merged\";\r\nworksheet.getCell(\"C1\").value = \"I am not\";\r\nworksheet.getCell(\"C2\").value = \"Neither am I\";\r\nworksheet.getRow(2).commit(); // now rows 1 and two are committed.\r\n```\r\n\r\nAs each worksheet is completed, it must also be committed:\r\n\r\n```javascript\r\n// Finished adding data. Commit the worksheet\r\nworksheet.commit();\r\n```\r\n\r\nTo complete the XLSX document, the workbook must be committed. If any worksheet in a workbook are uncommitted,\r\n they will be committed automatically as part of the workbook commit.\r\n\r\n```javascript\r\n// Finished the workbook.\r\nworkbook.commit();\r\n```\r\n\r\n# Value Types\r\n\r\nThe following value types are supported.\r\n\r\n| Enum Name                 | Enum(*)   | Description       | Example Value |\r\n| ------------------------- | --------- | ----------------- | ------------- |\r\n| Excel.ValueType.Null      | 0         | No value.         | null |\r\n| Excel.ValueType.Merge     | 1         | N/A               | N/A |\r\n| Excel.ValueType.Number    | 2         | A numerical value | 3.14 |\r\n| Excel.ValueType.String    | 3         | A text value      | \"Hello, World!\" |\r\n| Excel.ValueType.Date      | 4         | A Date value      | new Date()  |\r\n| Excel.ValueType.Hyperlink | 5         | A hyperlink       | { text: \"www.mylink.com\", hyperlink: \"http://www.mylink.com\" } |\r\n| Excel.ValueType.Formula   | 6         | A formula         | { formula: \"A1+A2\", result: 7 } |\r\n\r\n# Interface Changes\r\n\r\nEvery effort is made to make a good consistent interface that doesn't break through the versions but regrettably, now and then some things have to change for the greater good.\r\n\r\n## Interface Breaks in 0.1.0\r\n\r\n### Worksheet.eachRow\r\n\r\nThe arguments in the callback function to Worksheet.eachRow have been swapped and changed; it was function(rowNumber,rowValues), now it is function(row, rowNumber) which gives it a look and feel more like the underscore (_.each) function and prioritises the row object over the row number. \r\n\r\n### Worksheet.getRow\r\n\r\nThis function has changed from returning a sparse array of cell values to returning a Row object. This enables accessing row properties and will facilitate managing row styles and so on.\r\n\r\nThe sparse array of cell values is still available via Worksheet.getRow(rowNumber).values;\r\n\r\n## Interface Breaks in 0.1.1\r\n\r\n### cell.model\r\n\r\ncell.styles renamed to cell.style\r\n\r\n# Known Issues\r\n\r\n## Too Many Worksheets Results in Parse Error\r\n\r\nThere appears to be an issue in one of the dependent libraries (unzip) where too many files causes the following error to be emitted:\r\n\r\n```javascript\r\n    invalid signature: 0x80014\r\n```\r\n\r\nIn practical terms, this error only seems to arise with over 98 sheets (or 49 sheets with hyperlinks) so it shouldn't affect that many. I will keep an eye on it though.\r\n\r\n# Release History\r\n\r\n| Version | Changes |\r\n| ------- | ------- |\r\n| 0.0.9   | <ul><li><a href=\"#number-formats\">Number Formats</a></li></ul> |\r\n| 0.1.0   | <ul><li>Bug Fixes<ul><li>\"&lt;\" and \"&gt;\" text characters properly rendered in xlsx</li></ul></li><li><a href=\"#columns\">Better Column control</a></li><li><a href=\"#rows\">Better Row control</a></li></ul> |\r\n| 0.1.1   | <ul><li>Bug Fixes<ul><li>More textual data written properly to xml (including text, hyperlinks, formula results and format codes)</li><li>Better date format code recognition</li></ul></li><li><a href=\"#fonts\">Cell Font Style</a></li></ul> |\r\n| 0.1.2   | <ul><li>Fixed potential race condition on zip write</li></ul> |\r\n| 0.1.3   | <ul><li><a href=\"#alignment\">Cell Alignment Style</a></li><li><a href=\"#rows\">Row Height</a></li><li>Some Internal Restructuring</li></ul> |\r\n| 0.1.5   | <ul><li>Bug Fixes<ul><li>Now handles 10 or more worksheets in one workbook</li><li>theme1.xml file properly added and referenced</li></ul></li><li><a href=\"#borders\">Cell Borders</a></li></ul> |\r\n| 0.1.6   | <ul><li>Bug Fixes<ul><li>More compatable theme1.xml included in XLSX file</li></ul></li><li><a href=\"#fills\">Cell Fills</a></li></ul> |\r\n| 0.1.8   | <ul><li>Bug Fixes<ul><li>More compatable theme1.xml included in XLSX file</li><li>Fixed filename case issue</li></ul></li><li><a href=\"#fills\">Cell Fills</a></li></ul> |\r\n| 0.1.9   | <ul><li>Bug Fixes<ul><li>Added docProps files to satisfy Mac Excel users</li><li>Fixed filename case issue</li><li>Fixed worksheet id issue</li></ul></li><li><a href=\"#set-workbook-properties\">Core Workbook Properties</a></li></ul> |\r\n| 0.1.10  | <ul><li>Bug Fixes<ul><li>Handles File Not Found error</li></ul></li><li><a href=\"#csv\">CSV Files</a></li></ul> |\r\n| 0.1.11  | <ul><li>Bug Fixes<ul><li>Fixed Vertical Middle Alignment Issue</li></ul></li><li><a href=\"#styles\">Row and Column Styles</a></li><li><a href=\"#rows\">Worksheet.eachRow supports options</a></li><li><a href=\"#rows\">Row.eachCell supports options</a></li><li><a href=\"#columns\">New function Column.eachCell</a></li></ul> |\r\n| 0.2.0   | <ul><li><a href=\"#streaming-xlxs-writer\">Streaming XLSX Writer</a><ul><li>At long last ExcelJS can support writing massive XLSX files in a scalable memory efficient manner. Performance has been optimised and even smaller spreadsheets can be faster to write than the document writer. Options have been added to control the use of shared strings and styles as these can both have a considerable effect on performance</li></ul></li><li><a href=\"#rows\">Worksheet.lastRow</a><ul><li>Access the last editable row in a worksheet.</li></ul></li><li><a href=\"#rows\">Row.commit()</a><ul><li>For streaming writers, this method commits the row (and any previous rows) to the stream. Committed rows will no longer be editable (and are typically deleted from the worksheet object). For Document type workbooks, this method has no effect.</li></ul></li></ul> |\r\n| 0.2.2   | <ul><li><a href=\"https://pbs.twimg.com/profile_images/2933552754/fc8c70829ee964c5542ae16453503d37.jpeg\">One Billion Cells</a><ul><li>Achievement Unlocked: A simple test using ExcelJS has created a spreadsheet with 1,000,000,000 cells. Made using random data with 100,000,000 rows of 10 cells per row. I cannot validate the file yet as Excel will not open it and I have yet to implement the streaming reader but I have every confidence that it is good since 1,000,000 rows loads ok.</li></ul></li></ul> |\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/guyonroche/exceljs/issues"
  },
  "homepage": "https://github.com/guyonroche/exceljs",
  "_id": "exceljs@0.2.3",
  "_from": "exceljs@"
}
