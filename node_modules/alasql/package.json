{
  "name": "alasql",
  "description": "Versatile SQL database for browser or node. Handles relational data and nested JSON (noSQL). Export to and import from Excel, localStorage or IndexedDB",
  "version": "0.2.2",
  "author": {
    "name": "Andrey Gershun",
    "email": "agershun@gmail.com"
  },
  "contributors": [
    {
      "name": "Mathias Rangel Wulff",
      "email": "mathias@rawu.dk"
    }
  ],
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "gulp && cd test && ../node_modules/.bin/mocha . --reporter dot",
    "test:only": "cd test && ../node_modules/.bin/mocha . --reporter dot",
    "test:browser": "node test/browserTestRunner.js 7387",
    "build": "gulp",
    "build:jison": "gulp --jison && ./node_modules/.bin/gulp",
    "build:watch": "gulp watch",
    "bump": "mversion --no-prefix",
    "uptodate": "npm-check && ./node_modules/.bin/npm-check -u",
    "release": "f='/TMP/alasql.tmp' && curl https://raw.githubusercontent.com/wiki/agershun/alasql/how-to-release.md > $f && sh $f ; rm $f",
    "jison": "jison ./src/alasqlparser.jison -o ./src/alasqlparser.js"
  },
  "dependencies": {
    "dom-storage": "^2.0.1",
    "es6-promise": "^3.0.2",
    "lodash": "^3.10.0",
    "xlsjs": "^0.7.5",
    "xlsx": "^0.8.0"
  },
  "devDependencies": {
    "blueimp-md5": "^1.1.1",
    "gulp": "^3.9.0",
    "gulp-concat": "^2.6.0",
    "gulp-dereserve": "^0.2.1",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-shell": "^0.5.0",
    "gulp-uglify": "^1.4.1",
    "jison": "^0.4.15",
    "mocha": "^2.3.0",
    "mversion": "^1.10.0",
    "npm-check": "^4.0.1",
    "open": "0.0.5",
    "strftime": "^0.9.2",
    "uglifyjs": "^2.4.10",
    "yargs": "^3.31.0"
  },
  "engines": [
    "node"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/agershun/alasql.git"
  },
  "bugs": {
    "url": "https://github.com/agershun/alasql/issues"
  },
  "bin": {
    "alasql": "./bin/alasql.js",
    "alaserver": "./bin/alaserver.js"
  },
  "homepage": "https://github.com/agershun/alasql",
  "main": "dist/alasql.js",
  "keywords": [
    "sql",
    "nosql",
    "graph",
    "alasql",
    "javascript",
    "parser",
    "database",
    "DBMS",
    "data",
    "query",
    "localStorage",
    "IndexedDB",
    "DOM-storage",
    "SQLite",
    "JSON",
    "Excel",
    "XLSX",
    "XLS",
    "CSV",
    "worker"
  ],
  "license": "MIT",
  "preferGlobal": true,
  "testling": {
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/4..latest",
      "ipad/4..latest",
      "android-browser/4..latest"
    ]
  },
  "readme": "\n[![bitHound Score](https://www.bithound.io/github/agershun/alasql/badges/score.svg?123)](https://www.bithound.io/github/agershun/alasql) \n[![Build status](https://api.travis-ci.org/agershun/alasql.svg)](https://travis-ci.org/agershun/alasql?123) \n[![NPM downloads](http://img.shields.io/npm/dm/alasql.svg?style=flat&label=npm%20downloads)](https://npmjs.org/package/alasql?) \n[![Inline docs](http://inch-ci.org/github/agershun/alasql.svg?branch=develop)](http://inch-ci.org/github/agershun/alasql) \n![Stars](https://img.shields.io/github/stars/agershun/alasql.svg?label=Github%20%E2%98%85) \n![Release](https://img.shields.io/github/release/agershun/alasql.svg?label=Last%20release) \n![NPM version](https://img.shields.io/npm/l/alasql.svg?123) \n\n\n_Got a question? Ask on [Stack Overflow](http://stackoverflow.com/questions/ask?tags=AlaSQL) and tag with \"alasql\"._\n\n_Like it? Give us a github star, spread the word, send a tweet._ \n\n\n# AlaSQL\n\n\n_( [à la](http://en.wiktionary.org/wiki/%C3%A0_la) [SQL](http://en.wikipedia.org/wiki/SQL) ) [ælæ ɛskju:ɛl]_ - AlaSQL is an open source SQL database for Javascript with a strong foucus on query speed and datasource flexibillity for relational data, schemaless data, and graph data. It works in your browser, Node.js, IO.js and Cordova.\n\nThe library is designed for:\n\n* Fast SQL based in-memory data processing for BI and ERP applications on fat clients\n* Easy ETL and option for persistency by data import / manipulation / export for several formats\n* All major browsers,  Node.js, and mobile applications\n\nWe focus on [speed](https://github.com/agershun/alasql/wiki/Speed) by taking advantage of the dynamic nature of javascript when building up queries. Real world solutions demands flexibility regarding where data comes from and where it is to be stored. We focus on flexibility by making sure you can [import/export](https://github.com/agershun/alasql/wiki/Import-export) and query directly on data stored in Excel (both `xls` and `.xlsx`), CSV, JSON, TAB, IndexedDB, LocalStorage, and SQLite files.\n\n\nThe library brings you the comfort of a full database engine to your javascript app. No, really - its working towards a full database engine complying with [most of SQL-99](https://github.com/agershun/alasql/wiki/Supported-SQL-statements) spiced up with additional syntax for handling noSQL (schema less) data and graph networks. \n\n \n```js\n// A) Traditional SQL\nalasql(\"CREATE TABLE cities (city string, population number)\");\n\nalasql(\"INSERT INTO cities VALUES ('Rome',2863223),('Paris',2249975),('Berlin',3517424),('Madrid',3041579)\");\n\nvar res = alasql(\"SELECT * FROM cities WHERE population < 3500000 ORDER BY population DESC\");\n\nconsole.log(res);  \n\n/* \n[\n  {\n    \"city\": \"Madrid\",\n    \"population\": 3041579\n  },\n  {\n    \"city\": \"Rome\",\n    \"population\": 2863223\n  },\n  {\n    \"city\": \"Paris\",\n    \"population\": 2249975\n  }\n]\n*/\t\n```\n\n```js\n// B) SQL on array of objects\nvar data = [{a:1,b:10}, {a:2,b:20}, {a:1,b:30}];\n\nvar res = alasql('SELECT a, SUM(b) AS b FROM ? GROUP BY a',[data]);    \n\nconsole.log(res); // [{\"a\":1,\"b\":40},{\"a\":2,\"b\":20}]\n```\n\n```js\n// C) Promise notation + read from file example\nalasql.promise('SELECT * FROM XLS(\"mydata.xls\") WHERE lastname LIKE \"A%\" and city = \"London\" GROUP BY name ')\n      .then(function(res){\n           console.log(res); // output depends on mydata.xls\n      }).catch(function(err){\n           console.log('Does the file exists? there was an error:', err);\n      });\n```\n\n\n\n\n```js\n// D) Cheat and load your data directly\n\nalasql(\"CREATE TABLE example1 (a INT, b INT)\");\n\nalasql.tables.example1.data = [               // Insert data directly from javascript object...\n    {a:2,b:6},\n    {a:3,b:4}\n];\n\nalasql(\"INSERT INTO example1 VALUES (1,5)\");  // ...or you insert data with normal SQL \n\nvar res = alasql(\"SELECT * FROM example1 ORDER BY b DESC\");\n\nconsole.log(res); // [{a:2,b:6},{a:1,b:5},{a:3,b:4}]\n```\n    \njsFiddle with [example A)](http://jsfiddle.net/hguw3LLk/) and [example B)](http://jsfiddle.net/c1hbytf1/)\n\n## Install\n\n\n```bash\nnpm install --save alasql      # node\nmeteor add agershun:alasql     # meteor\nbower install --save alasql    # bower\nnpm install -g alasql          # command line\n```\n\nFor the browser: include [alasql.min.js](http://cdn.jsdelivr.net/alasql/latest/alasql.min.js)  \n\n```html\n<script src=\"http://cdn.jsdelivr.net/alasql/0.2/alasql.min.js\"></script> \n```\n\n\n## Get started\n\nThe wiki has a great section on [how to get started](https://github.com/agershun/alasql/wiki/Getting%20started) \n\nWhen you feel you got the grip you can check out the wiki section about [data manipulation](https://github.com/agershun/alasql/wiki/Data-manipulation) or getting inspired by the [list of Q&As](http://stackoverflow.com/questions/tagged/alasql)\n\n\n\n\n* Documentation: [Github wiki](https://github.com/agershun/alasql/wiki)\n\n* Library CDN: [jsDelivr.com](http://www.jsdelivr.com/#!alasql)\n\n* Feedback: [Open an issue](https://github.com/agershun/alasql/issues/new)\n\n* Try online: <a href=\"http://alasql.org/console?CREATE TABLE cities (city string, population number);INSERT INTO cities VALUES ('Rome',2863223), ('Paris',2249975),('Berlin',3517424), ('Madrid',3041579);SELECT * FROM cities WHERE population < 3500000 ORDER BY population DESC\">Playground</a>\n\n* Website: [alasql.org](http://AlaSQL.org)\n\n\n\n\n\n\n## Please note\n\n**All contributions are much welcome and greatly appreciated(!)** - \nThe project has never received any funding and is based on unpaid voluntary work: [We really (really) love pull requests](https://github.com/agershun/alasql/blob/develop/CONTRIBUTING.md)\n\n\nAlaSQL project is very young and still in active development phase, therefore it <s>may</s> have [bugs](https://github.com/agershun/alasql/labels/Bug). Please, submit any bugs and suggestions [as an issue](https://github.com/agershun/alasql/issues/new). AlaSQL uses [Semantic Versioning](http://semver.org/) so please note that major version is zero (0.y.z) and the API can not be considered 100% stable. Consider this before using the library in production.  \n\nPlease chekout the [limitations of the library](https://github.com/agershun/alasql#limitations)\n\n\n## Peformance\nAlaSQL is very focused on speed and we make sure to use all the tricks we can find to make javascript spit out your results as quick as possible. For example:\n\n* Queries are cached as compiled functions. \n* Joined tables are pre-indexed\n* ```WHERE``` expressions are pre-filtered for joins\n\nThe results are good. Check out AlaSQL vs. other javaScript SQL databases: \n\n* **3x speed** [compared to SQL.js](http://jsperf.com/sql-js-vs-alasql-js/11) selecting with `SUM`, `JOIN`, and `GROUP BY`.\n\n* **1x speed** [compared to WebSQL](http://jsperf.com/alasql-js-vs-websql/8) selecting with `SUM`, `JOIN`, and `GROUP BY` (in-memory opperations for WebSQL - see [this discussion](https://github.com/agershun/alasql/issues/47))\n\n* **2x speed** [compared to Linq](http://jsperf.com/alasql-vs-linq-on-groupby/3) for `GROUP BY` on 1,048,576 rows\n\n\nSee more [speed related info on the wiki](https://github.com/agershun/alasql/wiki/Speed) \n\n\n\n\n\n\n\n\n## Fetures you might like\n\n\n\n\n### Traditional SQL\n\nUse \"good old\" SQL on your data with multiple levels of: `JOIN`, `VIEW`, `GROUP BY`, ```UNION```, ```PRIMARY KEY```, `ANY`, `ALL`, ```IN```, ```ROLLUP()```, ```CUBE()```, ```GROUPING SETS()```, ```CROSS APPLY```, ```OUTER APPLY```, ```WITH SELECT```, and subqueries. See the wiki to [compare supported features with SQL standarts](https://github.com/agershun/alasql/wiki/SQL%20keywords).\n\n\n\n### User defined functions in your SQL\n\nYou can use all benefits of SQL and JavaScript together by defining you own costume functions. Just add new functions to the alasql.fn object:\n\n\n```js\nalasql.fn.myfn = function(a,b) {\n    return a*b+1;\n}\nvar res = alasql('SELECT myfn(a,b) FROM one');\n```\n\nSee more [in the wiki](https://github.com/agershun/alasql/wiki/User-Defined-Functions)\n\n\n### Compiled statements and functions\n\n```js\nvar ins = alasql.compile('INSERT INTO one VALUES (?,?)'); \nins(1,10);\nins(2,20);\n```\n\nSee more [in the wiki](https://github.com/agershun/alasql/wiki/Compile)\n\n\n### Work directly on JSON data\n\nGroup your JavaScript array of objects by field and count number of records in each group:\n\n```js\nvar data = [{a:1,b:1,c:1},{a:1,b:2,c:1},{a:1,b:3,c:1}, {a:2,b:1,c:1}];\nvar res = alasql('SELECT a, COUNT(*) AS b FROM ? GROUP BY a',[data]);\nconsole.log(res);\n```\nSee more ideas of creative datamanipulation [in the wiki](https://github.com/agershun/alasql/wiki/Getting-started) \n\n\n\n\n\n\n\n### AlaSQL works in the console - CLI\n\nAfter globally installing AlaSQL `npm install alasql -g` you can access AlaSQL via the commandline  \n\n\n```bash\n> alasql \"SET @data = @[{a:'1',b:?},{a:'2',b:?}]; SELECT a, b FROM @data;\" 10 20\n[ 1, [ { a: 1, b: 10 }, { a: 2, b: 20 } ] ]\n\n> alasql \"VALUE OF SELECT COUNT(*) as abc FROM TXT('README.md') WHERE LENGTH([0]) > ?\" 140\n// Number of lines with more than 140 characters in README.md\n``` \n\nSee more [in the wiki](https://github.com/agershun/alasql/wiki/AlaSQL-CLI)\n\n\n\n\n### AlaSQL ♥ D3.js\n\nAlaSQL plays nice with d3.js and gives you a convinient way to integrate a specifik subset of your data vis the visual powers of d3. See more about [D3.js and AlaSQL in the wiki](https://github.com/agershun/alasql/wiki/d3.js)\n\n\n### AlaSQL ♥ Excel\n\nAlaSQL can export data to both [Excel 2003 (.xls)](https://github.com/agershun/alasql/wiki/XLS) and [Excel 2007 (.xlsx)](https://github.com/agershun/alasql/wiki/XLSX) with coloring of cells and other Excel formatting functions.  \n\n\n### AlaSQL ♥ Meteor \n\nMeteor is amazing. You can now query directly on your Meteor collections with SQL - simple and easy. See more about [Meteor and AlaSQL in the wiki](https://github.com/agershun/alasql/wiki/Meteor)\n\n\n\n### AlaSQL ♥ Angular.js \n\nAngular is great. Besides using AlaSQL for normal data manipulation it works like a charm for exporting you present scope to Excel. See more about [Angular and AlaSQL in the wiki](https://github.com/agershun/alasql/wiki/Angular.js)\n\n\n### AlaSQL ♥ Google Maps \n\nPinpointing data on a map should be easy. AlaSQL is great to prepare source data for Google Maps from for example Excel or CSV making a one unif of work for fetching and identifying whats relevant. See more about [Google Maps and AlaSQL in the wiki](https://github.com/agershun/alasql/wiki/Google-maps)\n\n\n\n### AlaSQL ♥ Google Spreadsheets\n\nAlaSQL can query data directly from a google spreadsheet. A good \"partnership\" for easy editing and powerfull data manipulation. See more about [Google Spreadsheets and AlaSQL in the wiki](https://github.com/agershun/alasql/wiki/Google-maps)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### AlaSQL supports plugins\n\nAlaSQL supports plugins. To install the plugin you need to use the `REQUIRE` statement. See more [at the wiki](https://github.com/agershun/alasql/wiki/Plugins)\n\n\n\n\n\n\n\n### Graphs \n\nAlaSQL is a multi-paradigm database with support for graphs that can be searched or manipulated. \n\n\n```js\n// Who loves lovers of Alice?\nvar res = alasql('SEARCH / ANY(>> >> #Alice) name');\nconsole.log(res) // ['Olga','Helen']\n```\n\nSee more [at the wiki](https://github.com/agershun/alasql/wiki/GRAPH)\n\n\n\n\n\n### AlaSQL as a WebWorker\n\nAlaSQL can work as a webworker. Include alasql-worker.js and thats's it: AlaSQL will work as a webworker.\n\n```html\n<script src=\"alasql-worker.min.js\"></script>\n<script>\nvar arr = [{a:1},{a:2},{a:1}];\n\talasql('SELECT * FROM ?',[arr],function(data){\n\t\tconsole.log(data);\n\t});\n</script>    \n```\n\nTry the example [at jsFiddle](http://jsfiddle.net/agershun/oxv4rzzc/).\n\nAnother option - run alasql.worker() function:\n\n```html\n<script src=\"alasql.min.js\"></script>\n<script>\n     alasql.worker();\n     var res = alasql('select value 10',[],function(res){\n          console.log(res);\n     });\n</script>\n```\n\nTry this example [in jsFiddle](http://jsfiddle.net/agershun/rjwp8u48/3/).\n\nAlso you can use AlaSQL in webworker just simply load it as a script:\n\n```js\n    importScripts('alasql.min.js');\n```\n\n### Read and write Excel, CSV, TAB, JSON,  and text files to/from database\n\nNow AlaSQL can work with files in XLS, XSLX, CSV, TAB, TXT, and JSON format\n\n```js\n    alasql('select * into one from csv(\"mydata.csv\")');\n    alasql('select Country, Name from xlsx(\"cities.xlsx\",{headers:true, range:\"B1:E10\"})\\\n        where Population > 100000',\n        [],function(data){\n        console.log(data);\n    });\n```\nSee test168 and test169 for examples\n\n### Read SQLite database files\n\nAlaSQL can read (not write) SQLite data files if you include [SQL.js](https://github.com/kripken/sql.js) library:\n```html\n    <script src=\"alasql.js\"></script>\n    <script src=\"sql.js\"></script>\n    <script>\n        alasql('ATTACH SQLITE DATABASE Chinook(\"Chinook_Sqlite.sqlite\");\\\n            USE Chinook; \\\n            SELECT * FROM Genre',[],function(res){\n                console.log(\"Genres:\",res.pop());\n        });\n    </script>\n```\n\nSee more detailed [the example](http://alasql.org/demo/004sqlite/).\n\n\n\n\n### ETL sample: CSV and IndexedDB database\n\nUpload CSV file with headers to IndexedDB database, and then save only asian countries \nto Excel file:\n```js\n    alasql('ATTACH INDEXEDDB DATABASE geo; \\\n            CREATE TABLE IF NOT EXISTS geo.country; \\\n            SELECT * INTO geo.country FROM CSV(\"country.csv\",{headers:true}); \\\n            SELECT * INTO XLSX(\"asia.xlsx\") FROM geo.country WHERE continent_name = \"Asia\"');\n```\nSee [the example](http://alasql.org/demo/001csv/). \n\n\n\n\n\nMost of SQL-99. Please [see the wiki](https://github.com/agershun/alasql/wiki/Supported-SQL-statements) for more info\n\n\n\n### JavaScript Sugar\n\nAlaSQL extends \"good old\" SQL to make it closer to JavaScript. The \"sugar\" includes:\n\n* Json objects - `{a:'1',b:@['1','2','3']}`\n* Object propertires - `obj->property->subproperty`\n* Object and arrays elements - ```obj->(a*1)```\n* JavaScript functions - ```obj->valueOf()```\n* SELECT VALUE, ROW, COLUMN, MATRIX to format results of query\n\n\n\n\n\n### localStorage and DOM-storage\nYou can use browser localStorage and [DOM-storage](https://github.com/node-browser-compat/dom-storage) as a data storage. Here is a sample:\n\n```\n    alasql('CREATE localStorage DATABASE IF NOT EXISTS Atlas');\n    alasql('ATTACH localStorage DATABASE Atlas AS MyAtlas');\n    alasql('CREATE TABLE IF NOT EXISTS MyAtlas.City (city string, population number)');\n    alasql('SELECT * INTO MyAtlas.City FROM ?',[[{city:'Vienna', population:1731000}, \n        {city:'Budapest', population:1728000}]]);\n    var res = alasql('SELECT * FROM MyAtlas.City');\n    console.log(res);\n```\n\nTry this sample in [jsFiddle](http://jsfiddle.net/agershun/x1gq3wf2/). Run this sample \ntwo or three times, and AlaSQL store more and more data in localStorage. Here, \"Atlas\" is \nthe name of localStorage database, where \"MyAtlas\" is a memory AlaSQL database.\n\nYou can use localStorage in two modes: SET AUTOCOMMIT ON to immediate save data\nto localStorage after each statement or SET AUTOCOMMIT OFF. In this case you need\nto use COMMIT statement to save all data from in-memory mirror to localStorage.\n\n### Work with CSV, TAB, TXT, and JSON files\nYou can use files in these formats directly from AlaSQL (in sync and async modes):\n\n```js\n    var res1 = alasq(\"select * from txt('mytext.txt') where [0] like 'M%'\");\n    var res2 = alasq(\"select * from tab('mydata.tab') order by [1]\");\n    var res3 = alasq(\"select [3] as city,[4] as population from csv('cities.csv')\");\n    \n    alasq(\"select * from json('array.json')\",[],function(res4){\n        console.log(res4)\n    });\n```\n\nSee [test157.js](test/test157.js) as an example.\n\n### JSON-object\n\nYou can use JSON objects in your databases (do not forget use == and !== operators for deep comparision of objects):\n\n```sql\n\nalasql> SELECT VALUE @{a:'1',b:'2'}\n\n{a:1,b:2}\n\nalasql> SELECT VALUE @{a:'1',b:'2'} == @{a:'1',b:'2'}\n\ntrue\n\nalasql> SELECT VALUE @{a:'1',b:'2'}->b\n\n2\n\nalasql> SELECT VALUE @{a:'1',b:(2*2)}->b\n\n4\n\n```\n\nTry AlaSQL JSON objects in  Console [sample](http://alasql.org/console?drop table if exists one;create table one;insert into one values @{a:@[1,2,3],c:{e:23}}, @{a:@[{b:@[1,2,3]}]};select * from one)\n\n\n\n### Alaserver - simple database server\n\nYes, you can even use AlaSQL as a very simple server for tests.\n\nTo run enter the command: \n```\n    alaserver [port]\n```\nthen type in browser something like \"http://127.0.0.1:1337/?SELECT VALUE 2*2\" \n\nWarning: Alaserver is not multi-thread, not concurent, and not secured.\n\n### Webpack\n\nTo use alasql with webpack, get [script-loader](https://github.com/webpack/script-loader).\n\nThen:\n```js\nrequire(\"script!alasql\");\n```\n\nWarning: This is a bad idea if you are using babel-loader\n```js\nimport alasql from \"script!alasql\";\n```\n\nas script-loader does not return the global instance of alasql.\n\n\n### Miss a feature? \nTake charge and [add your idea](http://feathub.com/agershun/alasql/features/new) or [vote on your favorite feature](http://feathub.com/agershun/alasql) to be implemented:\n\n[![Feature Requests](http://feathub.com/agershun/alasql?format=svg)](http://feathub.com/agershun/alasql)\n\n\n\n## Limitations\n\nPlease be aware that AlaSQL ~~may~~ have [bugs](https://github.com/agershun/alasql/labels/Bug). Besides the bugs there are a number of limitations\n\n0. AlaSQL has a (long) list of keywords that must be escaped if used for column names. When selecting a field named `key` please write ``` SELECT `key` FROM ... ``` instead. This is also the case for words like ``` `value` ```, ``` `read` ```, ``` `count` ```, ``` `by` ```, ``` `top` ```, ``` `path` ```, ``` `deleted` ```, ``` `work` ``` and ``` `offset` ```. Please consult the [full list of keywords](https://github.com/agershun/alasql/wiki/AlaSQL-Keywords).\n\n\n0. It is Ok with select for 1000000 records or to join two tables by 10000 records in each (You can use streamming functions to work with longer datasources - see [test/test143.js](test/test143.js)) but be aware that the workload is multiplied so selecting from more than 8 tables with just 100 rows in each will show bad performance. This is one of our top priorities to make better. \n\n0. Limited functionality for transactions (supports only for localStorage) - Sorry, transactions are limited, because AlaSQL started to use more complex approach for PRIMARY KEYS / FOREIGN KEYS. Transactions will be fully turned on again in future version.\n\n0. A `(FULL) OUTER JOIN` on more than 2 tables will not give the expected results\n\nProbably, there are many of others. Please, help us to fix them by [submitting it as an issue](https://github.com/agershun/alasql/issues). Thank you!\n  \n\n\n\n\n## Tests\n\n#### Tests with Mocha\nAlaSQL uses ```mocha``` for tests. Install mocha and run\n\n```\n    > npm test\n\n```\nor run [test/index.html](test/index.html) for tests in browser (Please serve via localhost with for example `http-server`).\n\n#### Tests with AlaSQL ASSERT from SQL\n\nNow you can use AlaSQL [ASSERT](wiki/Assert)  operator to test results of previous operation:\n\n```sql\n    CREATE TABLE one (a INT);\n    ASSERT 1;\n    INSERT INTO one VALUES (1),(2),(3);\n    ASSERT 3;\n    SELECT * FROM one ORDER BY a DESC;\n    ASSERT [{a:3},{a:2},{a:1}];\n```\n\n#### SQLLOGICTEST\n\nAlaSQL uses SQLLOGICTEST to test it compatibility with SQL-99. The tests include about 2.000.000 queries and statements.\n\nThe testruns can be found in the [testlog](TESTLOG.md).\n\n\n\n### FileSaver\n\nAlaSQL uses [FileSaver.js](https://github.com/eligrey/FileSaver.js/) library for saving files locally from the browser. Please be aware that it does not save files in Safari 8.0.\n\n\n\n\n## License\n\nMIT - see [MIT licence information](LICENSE)\n\n## Main contributors\n\n* [Andrey Gershun](http://github.com/agershun)\n* [Mathias Rangel Wulff](https://twitter.com/rangelwulff)\n* [Aubert Grégoire](https://github.com/gregaubert)\n\n## Credits\n\nMany thanks to Zach Carter for [Jison](http://zaach.github.io/jison/) parser generator, to the author of FileSaver.js, Andrew Kent for his [SQL Parser](https://github.com/forward/sql-parser), \nauthors of [XLSX](https://github.com/SheetJS/js-xlsx) library,\nand other people for useful tools, which make our work much easier.\n\n### Related projects that have inspired us\n\n* [AlaX](http://github.com/agershun/alax) - Export to Excel with colors and formats \n* [WebSQLShim](http://github.com/agershun/WebSQLShim) - WebSQL shim over IndexedDB (work in progress)\n* [AlaMDX](http://github.com/agershun/alamdx) - JavaScript MDX OLAP library (work in progresss) \n* [Other similar projects](http://github.com/agershun/alasql/wiki/Similar-Projects.md) - list of databases on JavaScript\n\n[![ghit.me](https://ghit.me/badge.svg?repo=agershun/alasql)](https://ghit.me/repo/agershun/alasql)\n\n----\n\n© 2014-2015, Andrey Gershun (agershun@gmail.com) & M. Rangel Wulff (m@rawu.dk)",
  "readmeFilename": "README.md",
  "_id": "alasql@0.2.2",
  "dist": {
    "shasum": "df78556cd012648097af45142ee0782e3eae6f57"
  },
  "_from": "alasql@",
  "_resolved": "https://registry.npmjs.org/alasql/-/alasql-0.2.2.tgz"
}
