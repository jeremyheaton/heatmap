{
  "name": "retry-as-promised",
  "version": "2.0.0",
  "description": "Retry a failed promise",
  "main": "index.js",
  "scripts": {
    "test": "DEBUG=retry-as-promised,retry-as-promised:* NODE_ENV=test ./node_modules/.bin/mocha --check-leaks --colors -t 10000 --reporter spec test/**/*.test.js test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mickhansen/retry-as-promised.git"
  },
  "keywords": [
    "retry",
    "promise",
    "bluebird"
  ],
  "author": {
    "name": "Mick Hansen",
    "email": "maker@mhansen.io"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mickhansen/retry-as-promised/issues"
  },
  "homepage": "https://github.com/mickhansen/retry-as-promised",
  "dependencies": {
    "bluebird": "^2.9.27",
    "debug": "^2.2.0"
  },
  "devDependencies": {
    "chai": "^2.3.0",
    "chai-as-promised": "^5.0.0",
    "mocha": "^2.2.5",
    "moment": "^2.10.6",
    "q": "^1.4.1",
    "sinon": "^1.15.1",
    "sinon-as-promised": "^4.0.0",
    "sinon-chai": "^2.8.0"
  },
  "readme": "# retry-as-promised\n\n```sh\n$ npm install --save retry-as-promised\n```\n\nRetry a failed promise\n\n```js\nvar retry = require('retry-as-promised');\n\n// Will call the until max retries or the promise is resolved.\nreturn retry(function () {\n  return promise;\n}, {\n  max: 3, // maximum amount of tries, default: 1\n  timeout: 10000 // throw if no response or error within milisecnd timeout, default: undefined\n});\n```\n\n## Tested with\n\n- Bluebird",
  "readmeFilename": "README.md",
  "_id": "retry-as-promised@2.0.0",
  "dist": {
    "shasum": "388550d609539e484417f6a023cea0c3a27432ba"
  },
  "_from": "retry-as-promised@^2.0.0",
  "_resolved": "https://registry.npmjs.org/retry-as-promised/-/retry-as-promised-2.0.0.tgz"
}
